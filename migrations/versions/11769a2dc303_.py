"""empty message

Revision ID: 11769a2dc303
Revises: a9b8f75b183a
Create Date: 2022-12-09 15:41:49.084312

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Card(Base):
    __tablename__ = "card"

    id = sa.Column(sa.Integer, primary_key=True)
    board_id = sa.Column(sa.Integer, sa.ForeignKey("board.id"))


class CardActivity(Base):
    __tablename__ = "card_activity"
    id = sa.Column(sa.Integer, primary_key=True)
    card_id = sa.Column(sa.Integer, sa.ForeignKey("card.id"))
    event = sa.Column(sa.SmallInteger, nullable=False)  # CardActivityEvent

    card = orm.relationship("Card", uselist=False)


# revision identifiers, used by Alembic.
revision = '11769a2dc303'
down_revision = 'a9b8f75b183a'
branch_labels = None
depends_on = None


def convert_numeric_activity_event(event: int) -> str:
    """Converts old numeric CardActivityEvent into new string based."""
    match event:
        case 1:
            return "card.create"
        case 2:
            return "card.move"
        case 3:
            return "card.comment"
        case 4:
            return "checklist.create"
        case 5:
            return "checklist.update"
        case 6:
            return "checklist.delete"
        case 7:
            return "checklist.item.marked"
        case 8:
            return "checklist.item.due_date"
        case 9:
            return "checklist.item.user_assign"
        case 10:
            return "card.member.assign"
        case 11:
            return "card.member.deassign"
        case 12:
            return "card.date.create"
        case 13:
            return "card.date.update"
        case 14:
            return "card.date.delete"
    return event


def upgrade():
    bind = op.get_bind()
    session = orm.Session(bind=bind)
    data = session.query(CardActivity)

    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('card_activity', schema=None) as batch_op:
        batch_op.add_column(
            sa.Column('board_id', sa.Integer()))
        batch_op.alter_column(column_name="event", type_=sa.String(255))
        batch_op.create_foreign_key(None, 'board', ['board_id'], [
                                    'id'], ondelete='CASCADE')

    # ### end Alembic commands ###

    for entity in data:
        # FIXME: Need better way to update card_activity
        op.execute(
            f"UPDATE card_activity SET board_id={entity.card.board_id}, event='{convert_numeric_activity_event(entity.event)}' WHERE id={entity.id}")
    session.commit()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('card_activity', schema=None) as batch_op:
        # batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('board_id')

    # ### end Alembic commands ###
